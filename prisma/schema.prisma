generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userID       Int    @id @default(autoincrement())
  uid          String?  @unique
  name         String
  email        String    @unique
  role         String?
  profilePicture String? 
  calls        Call[]
  techSupportCalls SupportCall[]
  callParticipants CallParticipant[]
  activityLogs ActivityLog[]
}

model Project {
  projectID          Int      @id @default(autoincrement())
  name               String
  description        String?
  problemDescription String?
  reqFuncionales     String?
  reqNoFuncionales   String?
  startDate          DateTime?
  endDate            DateTime?
  calls              Call[]
  projectCalls ProjectCall[]
  activityLogs ActivityLog[]
}

model Call {
  callID    Int      @id @default(autoincrement())
  title     String?
  startTime DateTime?
  endTime   DateTime?
  projectID Int?
  project   Project? @relation(fields: [projectID], references: [projectID], onDelete: SetNull, onUpdate: Cascade)
  userID    Int?
  user      User?    @relation(fields: [userID], references: [userID], onDelete: SetNull, onUpdate: Cascade)
  projectCalls ProjectCall[]
  techSupportCalls SupportCall[]
  callParticipants CallParticipant[]
  transcription String?
  callAnalysis CallAnalysis?
}

model ProjectCall {
  projectCallID Int    @id @default(autoincrement())
  callID       Int
  projectID    Int
  details      String?
  call         Call   @relation(fields: [callID], references: [callID], onDelete: Cascade)
  project      Project @relation(fields: [projectID], references: [projectID], onDelete: Cascade)
  activityLogs ActivityLog[]
}

model SupportCall {
  supportCallID Int    @id @default(autoincrement())
  callID           Int
  userID           Int
  issueDescription String?
  call             Call   @relation(fields: [callID], references: [callID], onDelete: Cascade)
  user             User   @relation(fields: [userID], references: [userID], onDelete: Cascade)
  activityLogs ActivityLog[]
}

model CallParticipant {
  participantID Int @id @default(autoincrement())
  callID       Int
  userID       Int
  joinedAt     DateTime?
  leftAt       DateTime?
  call         Call @relation(fields: [callID], references: [callID], onDelete: Cascade)
  user         User @relation(fields: [userID], references: [userID], onDelete: Cascade)
}

model CallAnalysis {
  analysisID      Int    @id @default(autoincrement())
  callID          Int   @unique
  title           String?
  sentiment       String?
  finalSentiment  String?
  solved          Boolean?
  reasonOfCall    String?
  resolution      String?
  lastPhrase      String?
  call            Call   @relation(fields: [callID], references: [callID], onDelete: Cascade)
}

model ActivityLog {
  activityLogID      Int      @id @default(autoincrement())
  userID             Int
  action             String
  timestamp          DateTime @default(now())
  projectID          Int?
  projectCallID      Int?
  supportCallID      Int?

  user               User           @relation(fields: [userID], references: [userID], onDelete: Cascade)
  project            Project?       @relation(fields: [projectID], references: [projectID], onDelete: Cascade)
  projectCall        ProjectCall?   @relation(fields: [projectCallID], references: [projectCallID], onDelete: Cascade)
  supportCall        SupportCall?   @relation(fields: [supportCallID], references: [supportCallID], onDelete: Cascade)
}
